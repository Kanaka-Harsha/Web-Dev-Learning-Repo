object deconstruction


const student = 
{
    name: "Harsha",
    id: 1,          // this is an object 
    dept: "iot"
};

.

const {name: newName, dept: newDept} = student; // alising or renaming

console.log(newName);
console.log(newDept);


rest property

const human = 
{
    name: "Harsha",
    bones: 206,
    nerves: 1000
};

const {name, ...otherDetails} = human;  // rest property

console.log(name);
console.log(otherDetails);




nested deconstructing

const vehicle =
{
    brand: "hyundai",
    electric:
    {
        wheels: 4
    },
    petrol:
    {
        tyres:4
    }
};

const {brand: name, electric: {wheels}, ...otherDetails}=vehicle;
console.log(name);
console.log(wheels);
console.log(otherDetails);




Array deconstructing, skipping elements

const cars=["KIA", "MG", "SUZUKI", "Audi"];
const [a,,b]=cars;
console.log(a);
console.log(b);



swapping variable

let a=5;
let b=10;
[a,b]=,[b,a];
console.log(a);
console.log(b);




example, dont help me

const formData =
{
    email: "harsha@gmail.com",
    pass: 1319,
    user: "Harsha"
};

const {email, pass, user} = formData;

const isValidEmail = (email) =>
{
    return email.includes("@") && email.includes("."); // includes is used to check if it contain the value mentioned in the bracket
}

if(isValidEmail(email))
{
    console.log(`Hello ${user}!! We have created an account with email: ${email}`);
}
else
{
    console.log("Invalid email");
}









frontend js/ DOM(document oriented model)
assume an html file


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1 id="head">Hello World</h1>
    <p>This is a paragraph</p>
    <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
    </ul>

    <script>
        const head = document.getElementById('head');
        console.log(head);
    </script>
</body>
</html>












